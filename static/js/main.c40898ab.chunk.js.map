{"version":3,"sources":["constant.js","components/SpaceXOverview/SpaceXCardSection/SpaceXCard/index.jsx","helpers/getParamsData.js","components/SpaceXOverview/SpaceXCardSection/index.jsx","components/SpaceXOverview/FilterSection/index.jsx","components/SpaceXOverview/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MAIN_HEADING","DEVELOPERS_DETAILS","FILTER_MONTH","SUCCESS_BUTTON","FILTER_HEADING","LAUNCH_HEADING","SUCCESSFUL_LAUNCH_HEADING","SUCCESSFUL_LAND_HEADING","ERROR_MSG","MISSION_ID","LAUNCH_YEAR","SUCCESSFUL_LAUNCH","SUCCESSFUL_LANDING","SpaceXCard","props","cardData","flight_number","mission_name","mission_patch_small","links","mission_id","launch_year","launch_success","land_success","rocket","first_stage","cores","missionId","className","src","alt","getParamsData","val","substring","indexOf","withRouter","pathname","location","useState","yearFilter","setYearFilter","launchFilter","setLaunchFilter","landFilter","setLandFilter","spaceData","setSpaceData","useEffect","includes","year","launch","land","fetch","then","res","json","length","map","data","key","history","clickHandler","push","onClick","toLocaleLowerCase","SpaceXOverview","App","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c40898ab.chunk.js","sourcesContent":["module.exports = {\n  MAIN_HEADING: 'SpaceX Launch Programs',\n  DEVELOPERS_DETAILS: 'Developed by: Deepak Singh Nagarkoti',\n  FILTER_MONTH: [2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n  SUCCESS_BUTTON: ['True', 'False'],\n  FILTER_HEADING: 'Filters',\n  LAUNCH_HEADING: 'Launch Year',\n  SUCCESSFUL_LAUNCH_HEADING: 'SUCCESSFUL Launch',\n  SUCCESSFUL_LAND_HEADING: 'SUCCESSFUL Landing',\n  ERROR_MSG: 'No Data Available, Please try different combinations',\n  MISSION_ID: 'Mission Ids:',\n  LAUNCH_YEAR: 'Launch Year:',\n  SUCCESSFUL_LAUNCH: 'Successful Launch:',\n  SUCCESSFUL_LANDING: 'Successful Landing:'\n}\n","import React from 'react'\n\nimport { MISSION_ID, LAUNCH_YEAR, SUCCESSFUL_LAUNCH, SUCCESSFUL_LANDING } from '../../../../constant'\nimport './index.scss'\n\nconst SpaceXCard = (props) => {\n  const { cardData: {\n    flight_number,\n    mission_name,\n    links : {\n      mission_patch_small\n    },\n    mission_id,\n    launch_year,\n    launch_success,\n    rocket: {\n      first_stage : {\n        cores: [{land_success}]\n      }\n    }\n  } } = props\n  const missionId = mission_id[0]?mission_id[0] : 'NA'\n\n  return (\n    <div className='space-card-wrapper'>\n    <img src={mission_patch_small} className=\"space-img\" alt=\"space-img\" />\n    <p>{`${mission_name} #${flight_number}`}</p>\n    <h3>{MISSION_ID}<span>{missionId}</span></h3>\n    <h3>{LAUNCH_YEAR}<span>{launch_year}</span></h3>\n    <h3>{SUCCESSFUL_LAUNCH}<span>{`${launch_success}`}</span></h3>\n    <h3>{SUCCESSFUL_LANDING}<span>{`${land_success}`}</span></h3>\n    </div>\n  )\n}\n\nexport default SpaceXCard\n","export const getParamsData = (val) => {\n  return val.substring(val.indexOf(\"=\") + 1)\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router'\n\nimport SpaceXCard from './SpaceXCard'\nimport { getParamsData } from '../../../helpers/getParamsData'\nimport { ERROR_MSG } from '../../../constant'\n\nconst SpaceXCardSection = (props) => {\n  const { location: {\n    pathname\n  } } = props\n\n  const [yearFilter, setYearFilter] = useState('')\n  const [launchFilter, setLaunchFilter] = useState('')\n  const [landFilter, setLandFilter] = useState('')\n  const [spaceData, setSpaceData] = useState({})\n\n  useEffect(() => {\n    if (pathname.includes('year')) {\n      const year = getParamsData(pathname)\n      setYearFilter(`&launch_year=${year}`)\n    } else if (pathname.includes('launch')) {\n      const launch = getParamsData(pathname)\n      setLaunchFilter(`&launch_success=${launch}`)\n    } else if (pathname.includes('land')) {\n      const land = getParamsData(pathname)\n      setLandFilter(`&land_success=${land}`)\n    }\n\n    fetch(`https://api.spacexdata.com/v3/launches?limit=100${yearFilter}${launchFilter}${landFilter}`)\n      .then(res => res.json())\n      .then(res => {\n        if(res.length>0){\n          setSpaceData(res)\n        } else {\n          setSpaceData('error')\n        }\n      })\n  }, [pathname, yearFilter, launchFilter, landFilter])\n  return (\n    <>\n      {(spaceData.length >= 1 &&  spaceData !== 'error') ? spaceData.map((data, key) => {\n        return <SpaceXCard key={key} cardData={data} />\n      })\n        : <h2>{ERROR_MSG}</h2>\n      }\n    </>\n  )\n}\n\nexport default withRouter(SpaceXCardSection)\n","import React from 'react'\nimport { withRouter } from 'react-router'\n\nimport './index.scss'\nimport {\n  FILTER_MONTH,\n  SUCCESS_BUTTON,\n  FILTER_HEADING,\n  LAUNCH_HEADING,\n  SUCCESSFUL_LAUNCH_HEADING,\n  SUCCESSFUL_LAND_HEADING\n} from '../../../constant'\n\nconst FilterSection = (props) => {\n  const { history } = props\n  const clickHandler = (val) => {\n    history.push(val)\n  }\n\n  return (\n    <div className='filter-wrapper'>\n      <h3>{FILTER_HEADING}</h3>\n      <p className='sub-heading'>{LAUNCH_HEADING}</p>\n      <hr />\n      {FILTER_MONTH.map((val, key) => {\n        return (\n          <button\n            key={key}\n            className=\"button year-button\"\n            onClick={() => clickHandler(`year=${val}`)}>\n            {val}\n          </button>\n        )\n      })}\n      <>\n        <p className='sub-heading'>{SUCCESSFUL_LAUNCH_HEADING}</p>\n        <hr />\n        {SUCCESS_BUTTON.map((val, key) => {\n          return (\n            <button\n              key={key}\n              className=\"button launch-button\"\n              onClick={() => clickHandler(`launch=${val.toLocaleLowerCase()}`)}>\n              {val}\n            </button>\n          )\n        })}\n      </>\n      <>\n        <p className='sub-heading'>{SUCCESSFUL_LAND_HEADING}</p>\n        <hr />\n        <span className='button-land-button'>\n          {SUCCESS_BUTTON.map((val, key) => {\n            return (\n              <button\n                key={key}\n                className=\"button land-button\"\n                onClick={() => clickHandler(`land=${val.toLocaleLowerCase()}`)}>\n                {val}\n              </button>\n            )\n          })}\n        </span>\n      </>\n    </div>\n  )\n}\n\nexport default withRouter(FilterSection)\n","import React from 'react'\n\nimport SpaceXCardSection from './SpaceXCardSection'\nimport FilterSection from './FilterSection'\nimport {MAIN_HEADING, DEVELOPERS_DETAILS} from '../../constant'\nimport './index.scss'\n\nconst SpaceXOverview = () => {\n  return (\n    <>\n      <p className=\"heading\">{MAIN_HEADING}</p>\n      <div className='filter-with-card'>\n        <div className='filter-section'>\n          <FilterSection />\n        </div>\n        <div className='card-section'>\n          <SpaceXCardSection />\n        </div>\n      </div>\n      <h3 className=\"footer-text\">{DEVELOPERS_DETAILS}</h3>\n    </>\n  )\n}\n\nexport default SpaceXOverview\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Route\n} from 'react-router-dom'\n\nimport SpaceXOverview from './components/SpaceXOverview'\n\nconst App = () => {\n  return (\n    <Router>\n      <Route path='/' component={SpaceXOverview}></Route>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}